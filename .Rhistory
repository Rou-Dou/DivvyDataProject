list.files(pattern = 'd_ride') %>%
map_df(~fread(header = FALSE, .)) -> d_ride_table
r_station_lat_lng <- read.csv(
".\cyclistic_r_station_lat_lon.csv",
## Data Import
list.files(pattern = 'd_ride') %>%
map_df(~fread(header = FALSE, .)) -> d_ride_table
r_station_lat_lng <- read.csv(
".\cyclistic_r_station_lat_lon.csv\",
## Data Import
list.files(pattern = 'd_ride') %>%
map_df(~fread(header = FALSE, .)) -> d_ride_table
r_station_lat_lng <- read.csv(
"./cyclistic_r_station_lat_lon.csv/",
header = FALSE)
## Data Import
list.files(pattern = 'd_ride') %>%
map_df(~fread(header = FALSE, .)) -> d_ride_table
r_station_lat_lng <- read.csv(
"/cyclistic_r_station_lat_lon.csv/",
header = FALSE)
setwd("~/DivvyDataProject/R")
## Data Import
list.files(pattern = 'd_ride') %>%
map_df(~fread(header = FALSE, .)) -> d_ride_table
r_station_lat_lng <- read.csv(
"cyclistic_r_station_lat_lon.csv",
header = FALSE)
setwd("~/DivvyDataProject/R")
## Data Import
list.files(pattern = 'd_ride') %>%
map_df(~fread(header = FALSE, .)) -> d_ride_table
r_station_lat_lng <- read.csv(
"cyclistic_r_station_lat_lon.csv",
header = FALSE)
setwd("C:/Users/mahon/Documents/DivvyDataProject/R")
setwd("C:/Users/mahon/Documents/DivvyDataProject/R")
knitr::opts_chunk$set(warning = FALSE, message=FALSE)
library(ggmap)
library(tidyverse)
library(lubridate)
library(maps)
library(ggthemes)
library(ggrepel)
library(data.table)
library(broom)
library(gridExtra)
library(knitr)
### create function to find mode
getmode <- function(x){
u <- unique(x)
t <- tabulate(match(x, u))
return(u[t == max(t)])
}
### Donut graphs require same inputs, created function to clean up code
createDonut <- function (x, filter_text){
x %>%
filter(member_type == filter_text) -> x_prime
x_prime$fraction <- x_prime$ride_count/
sum(x_prime$ride_count)
x_prime$ymax <- cumsum(x_prime$fraction)
x_prime$ymin <- c(0, head(x_prime$ymax, n=-1))
x_prime$labelPosition <- (x_prime$ymax + x_prime$ymin)/2
x_prime$season <- c('Winter', 'Spring', 'Summer', 'Fall')
return(x_prime)
}
getDateString <- function(x){
daysofweek <- c('Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday',
'Friday', 'Saturday')
return(daysofweek[x])
}
### Trip totals are calculated the same for both tables
### created function to reduce redundancy
trip_totals <- function (table_in, filter_name){
## Create Top_ten_trips table including both counts and lat/lon
## coordinates
table_in %>%
filter(member_type == filter_name) -> a
merge(x = a, y = r_station_pairs,
by = 'pair_id') %>%
arrange(desc(trip_count)) %>%
subset(select = c('start_station_id', 'end_station_id', 'trip_count')) %>%
head(10) -> b
##Add coordinate information to top_ten_stations using r_station_lat_lng
merge(x = r_station_lat_lng, y = b,
by.x = 'station_id', by.y = 'start_station_id') %>%
merge(y = r_station_lat_lng, by.x = 'end_station_id',
by.y = 'station_id') -> b
b <- setcolorder(b, c(2,3,4,1,6,7,5))
return(b)
}
## create theme preset for future graphs
baseTheme <-   theme_classic() +
theme(plot.title = element_text(hjust = .5, size = 13, face = 'bold',
family = 'serif'),
panel.background = element_rect(fill = "#3f403f"),
plot.background =  element_rect(fill = "#BEBEBE"),
axis.text.x = element_text(color =  "black", family = 'serif'),
axis.text.y = element_text(color =  "black", family = 'serif'),
strip.text = element_text(size = 11, family = 'serif'))
axisScale <- 1000
yScaleMax <- 1000
yScaleMin <- 0
byValue <- 50
## x-axis values for graphs
discreteX <- scale_x_discrete(name = 'day of week',
limits = c('sun','mon','tue','wed','thur','fri','sat'))
## y-axis values for graphs
continuousY <-  scale_y_continuous(name = paste("total_rides (",
axisScale, '\'s)'),
seq(yScaleMin, yScaleMax,by=byValue),
labels = scales::comma)
## Data Import
list.files(pattern = 'd_ride') %>%
map_df(~fread(header = FALSE, .)) -> d_ride_table
r_station_lat_lng <- read.csv(
"cyclistic_r_station_lat_lon.csv",
header = FALSE)
## Data Import
list.files(pattern = 'd_ride') %>%
map_df(~fread(header = FALSE, .)) -> d_ride_table
r_station_lat_lng <- read.csv(
"C:/Users/mahon/Documents/DivvyDataProject/R/cyclistic_r_station_lat_lon.csv",
header = FALSE)
r_station_table <- read.csv(
"cyclistic_r_station_table.csv",
header = FALSE)
## Data Import
list.files(pattern = 'd_ride') %>%
map_df(~fread(header = FALSE, .)) -> d_ride_table
r_station_lat_lng <- read.csv(
"cyclistic_r_station_lat_lon.csv",
header = FALSE)
## Data Import
list.files(pattern = 'd_ride') %>%
map_df(~fread(header = FALSE, .)) -> d_ride_table
r_station_lat_lng <- read.csv(
"./cyclistic_r_station_lat_lon.csv",
header = FALSE)
## Data Import
list.files(pattern = 'd_ride') %>%
map_df(~fread(header = FALSE, .)) -> d_ride_table
r_station_lat_lng <- read.csv(
"cyclistic_r_station_lat_lon.csv",
header = FALSE)
View(d_ride_table)
setwd("C:/Users/mahon/Documents/DivvyDataProject/R")
## Data Import
list.files(pattern = 'd_ride') %>%
map_df(~fread(header = FALSE, .)) -> d_ride_table
r_station_lat_lng <- read.csv(
"cyclistic_r_station_lat_lon.csv",
header = FALSE)
setwd("C:/Users/mahon/Documents/DivvyDataProject/R")
## Data Import
list.files(pattern = 'd_ride') %>%
map_df(~fread(header = FALSE, .)) -> d_ride_table
r_station_lat_lng <- read.csv(
"cyclistic_r_station_lat_lon.csv",
header = FALSE)
setwd("~/DivvyDataProject")
## Data Import
list.files(pattern = 'd_ride') %>%
map_df(~fread(header = FALSE, .)) -> d_ride_table
r_station_lat_lng <- read.csv(
"cyclistic_r_station_lat_lon.csv",
header = FALSE)
## Data Import
list.files(pattern = 'd_ride') %>%
map_df(~fread(header = FALSE, .)) -> d_ride_table
r_station_lat_lng <- read.csv(
"./cyclistic_r_station_lat_lon.csv",
header = FALSE)
## Data Import
list.files(pattern = 'd_ride') %>%
map_df(~fread(header = FALSE, .)) -> d_ride_table
r_station_lat_lng <- read.csv(
"./cyclistic_r_station_lat_lon.csv/",
header = FALSE)
## Data Import
list.files(pattern = 'd_ride') %>%
map_df(~fread(header = FALSE, .)) -> d_ride_table
r_station_lat_lng <- read.csv(
"./R/cyclistic_r_station_lat_lon.csv",
header = FALSE)
## Data Import
list.files(pattern = 'd_ride') %>%
map_df(~fread(header = FALSE, .)) -> d_ride_table
r_station_lat_lng <- read.csv(
"./R/cyclistic_r_station_lat_lon.csv/",
header = FALSE)
## Data Import
list.files(pattern = 'd_ride') %>%
map_df(~fread(header = FALSE, .)) -> d_ride_table
r_station_lat_lng <- read.csv(
"./R/cyclistic_r_station_lat_lon.csv",
header = FALSE)
## Data Import
list.files(pattern = 'd_ride') %>%
map_df(~fread(header = FALSE, .)) -> d_ride_table
r_station_lat_lng <- read.csv(
"DivvyDataProject/R/cyclistic_r_station_lat_lon.csv",
header = FALSE)
r_station_table <- read.csv(
"cyclistic_r_station_table.csv",
header = FALSE)
## Data Import
list.files(pattern = 'd_ride') %>%
map_df(~fread(header = FALSE, .)) -> d_ride_table
r_station_lat_lng <- read.csv(
"DivvyDataProject/R/cyclistic_r_station_lat_lon.csv",
header = FALSE)
r_station_table <- read.csv(
"DivvyDataProject/R/cyclistic_r_station_table.csv",
header = FALSE)
setDT(d_ride_table)
### rename columns
names(r_station_lat_lng) <- c('station_id', 'lat', 'lon')
names(d_ride_table) <- c('ride_id', 'rideable_type', 'started_at', 'ended_at',
'start_station_id', 'end_station_id',
'member_casual', 'ride_in_seconds',
'ride_length', 'year_of_ride', 'month_of_ride',
'day_of_week')
setwd(C:\Users\mahon\Documents\DivvyDataProject\R)
setwd(C:\\Users\\mahon\\Documents\\DivvyDataProject\\R)
setwd(C:/Users/mahon/Documents/DivvyDataProject/R)
setwd('C:/Users/mahon/Documents/DivvyDataProject/R')
setwd('C:/Users/mahon/Documents/DivvyDataProject)
setwd('C:/Users/mahon/Documents/DivvyDataProject')
knitr::opts_chunk$set(warning = FALSE, message=FALSE)
setwd('C:/Users/mahon/Documents/DivvyDataProject')
## Data Import
list.files(pattern = 'd_ride') %>%
map_df(~fread(header = FALSE, .)) -> d_ride_table
r_station_lat_lng <- read.csv(
"cyclistic_r_station_lat_lon.csv",
header = FALSE)
## Data Import
list.files(pattern = 'd_ride') %>%
map_df(~fread(header = FALSE, .)) -> d_ride_table
r_station_lat_lng <- read.csv(
"R/cyclistic_r_station_lat_lon.csv",
header = FALSE)
setwd('C:/Users/mahon/Documents/DivvyDataProject/R')
knitr::opts_chunk$set(warning = FALSE, message=FALSE)
setwd('C:/Users/mahon/Documents/DivvyDataProject/R')
## Data Import
list.files(pattern = 'd_ride') %>%
map_df(~fread(header = FALSE, .)) -> d_ride_table
r_station_lat_lng <- read.csv(
"cyclistic_r_station_lat_lon.csv",
header = FALSE)
## Data Import
list.files(pattern = 'd_ride') %>%
map_df(~fread(header = FALSE, .)) -> d_ride_table
r_station_lat_lng <- read.csv(
"cyclistic_r_station_lat_lon.csv",
header = FALSE)
## Data Import
list.files(pattern = 'd_ride') %>%
map_df(~fread(header = FALSE, .)) -> d_ride_table
r_station_lat_lng <- read.csv(
"/cyclistic_r_station_lat_lon.csv",
header = FALSE)
## Data Import
list.files(pattern = 'd_ride') %>%
map_df(~fread(header = FALSE, .)) -> d_ride_table
r_station_lat_lng <- read.csv(
"./cyclistic_r_station_lat_lon.csv",
header = FALSE)
## Data Import
list.files(pattern = 'd_ride') %>%
map_df(~fread(header = FALSE, .)) -> d_ride_table
r_station_lat_lng <- read.csv(
"./cyclistic_r_station_lat_lon.csv",
header = FALSE)
## Data Import
list.files(pattern = 'd_ride') %>%
map_df(~fread(header = FALSE, .)) -> d_ride_table
r_station_lat_lng <- read.csv(
".\\cyclistic_r_station_lat_lon.csv",
header = FALSE)
## Data Import
list.files(pattern = 'd_ride') %>%
map_df(~fread(header = FALSE, .)) -> d_ride_table
r_station_lat_lng <- read.csv(
"\\cyclistic_r_station_lat_lon.csv",
header = FALSE)
## Data Import
list.files(pattern = 'd_ride') %>%
map_df(~fread(header = FALSE, .)) -> d_ride_table
r_station_lat_lng <- read.csv(
"\\cyclistic_r_station_lat_lon.csv\\",
header = FALSE)
## Data Import
list.files(pattern = 'd_ride') %>%
map_df(~fread(header = FALSE, .)) -> d_ride_table
r_station_lat_lng <- read.csv(
"cyclistic_r_station_lat_lon.csv",
header = FALSE)
knitr::opts_chunk$set(warning = FALSE, message=FALSE)
setwd('C:/Users/mahon/Documents/DivvyDataProject/R')
library(ggmap)
library(tidyverse)
library(lubridate)
library(maps)
library(ggthemes)
library(ggrepel)
library(data.table)
library(broom)
library(gridExtra)
library(knitr)
### create function to find mode
getmode <- function(x){
u <- unique(x)
t <- tabulate(match(x, u))
return(u[t == max(t)])
}
### Donut graphs require same inputs, created function to clean up code
createDonut <- function (x, filter_text){
x %>%
filter(member_type == filter_text) -> x_prime
x_prime$fraction <- x_prime$ride_count/
sum(x_prime$ride_count)
x_prime$ymax <- cumsum(x_prime$fraction)
x_prime$ymin <- c(0, head(x_prime$ymax, n=-1))
x_prime$labelPosition <- (x_prime$ymax + x_prime$ymin)/2
x_prime$season <- c('Winter', 'Spring', 'Summer', 'Fall')
return(x_prime)
}
getDateString <- function(x){
daysofweek <- c('Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday',
'Friday', 'Saturday')
return(daysofweek[x])
}
### Trip totals are calculated the same for both tables
### created function to reduce redundancy
trip_totals <- function (table_in, filter_name){
## Create Top_ten_trips table including both counts and lat/lon
## coordinates
table_in %>%
filter(member_type == filter_name) -> a
merge(x = a, y = r_station_pairs,
by = 'pair_id') %>%
arrange(desc(trip_count)) %>%
subset(select = c('start_station_id', 'end_station_id', 'trip_count')) %>%
head(10) -> b
##Add coordinate information to top_ten_stations using r_station_lat_lng
merge(x = r_station_lat_lng, y = b,
by.x = 'station_id', by.y = 'start_station_id') %>%
merge(y = r_station_lat_lng, by.x = 'end_station_id',
by.y = 'station_id') -> b
b <- setcolorder(b, c(2,3,4,1,6,7,5))
return(b)
}
## create theme preset for future graphs
baseTheme <-   theme_classic() +
theme(plot.title = element_text(hjust = .5, size = 13, face = 'bold',
family = 'serif'),
panel.background = element_rect(fill = "#3f403f"),
plot.background =  element_rect(fill = "#BEBEBE"),
axis.text.x = element_text(color =  "black", family = 'serif'),
axis.text.y = element_text(color =  "black", family = 'serif'),
strip.text = element_text(size = 11, family = 'serif'))
axisScale <- 1000
yScaleMax <- 1000
yScaleMin <- 0
byValue <- 50
## x-axis values for graphs
discreteX <- scale_x_discrete(name = 'day of week',
limits = c('sun','mon','tue','wed','thur','fri','sat'))
## y-axis values for graphs
continuousY <-  scale_y_continuous(name = paste("total_rides (",
axisScale, '\'s)'),
seq(yScaleMin, yScaleMax,by=byValue),
labels = scales::comma)
## Data Import
list.files(pattern = 'd_ride') %>%
map_df(~fread(header = FALSE, .)) -> d_ride_table
r_station_lat_lng <- read.csv(
"cyclistic_r_station_lat_lon.csv",
header = FALSE)
## Data Import
list.files(pattern = 'd_ride') %>%
map_df(~fread(header = FALSE, .)) -> d_ride_table
r_station_lat_lng <- read.csv(
"cyclistic_r_station_lat_lon.csv",
header = FALSE)
knitr::opts_chunk$set(warning = FALSE, message=FALSE)
setwd('C:/Users/mahon/Documents/DivvyDataProject/R')
library(ggmap)
library(tidyverse)
library(lubridate)
library(maps)
library(ggthemes)
library(ggrepel)
library(data.table)
library(broom)
library(gridExtra)
library(knitr)
### create function to find mode
getmode <- function(x){
u <- unique(x)
t <- tabulate(match(x, u))
return(u[t == max(t)])
}
### Donut graphs require same inputs, created function to clean up code
createDonut <- function (x, filter_text){
x %>%
filter(member_type == filter_text) -> x_prime
x_prime$fraction <- x_prime$ride_count/
sum(x_prime$ride_count)
x_prime$ymax <- cumsum(x_prime$fraction)
x_prime$ymin <- c(0, head(x_prime$ymax, n=-1))
x_prime$labelPosition <- (x_prime$ymax + x_prime$ymin)/2
x_prime$season <- c('Winter', 'Spring', 'Summer', 'Fall')
return(x_prime)
}
getDateString <- function(x){
daysofweek <- c('Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday',
'Friday', 'Saturday')
return(daysofweek[x])
}
### Trip totals are calculated the same for both tables
### created function to reduce redundancy
trip_totals <- function (table_in, filter_name){
## Create Top_ten_trips table including both counts and lat/lon
## coordinates
table_in %>%
filter(member_type == filter_name) -> a
merge(x = a, y = r_station_pairs,
by = 'pair_id') %>%
arrange(desc(trip_count)) %>%
subset(select = c('start_station_id', 'end_station_id', 'trip_count')) %>%
head(10) -> b
##Add coordinate information to top_ten_stations using r_station_lat_lng
merge(x = r_station_lat_lng, y = b,
by.x = 'station_id', by.y = 'start_station_id') %>%
merge(y = r_station_lat_lng, by.x = 'end_station_id',
by.y = 'station_id') -> b
b <- setcolorder(b, c(2,3,4,1,6,7,5))
return(b)
}
## create theme preset for future graphs
baseTheme <-   theme_classic() +
theme(plot.title = element_text(hjust = .5, size = 13, face = 'bold',
family = 'serif'),
panel.background = element_rect(fill = "#3f403f"),
plot.background =  element_rect(fill = "#BEBEBE"),
axis.text.x = element_text(color =  "black", family = 'serif'),
axis.text.y = element_text(color =  "black", family = 'serif'),
strip.text = element_text(size = 11, family = 'serif'))
axisScale <- 1000
yScaleMax <- 1000
yScaleMin <- 0
byValue <- 50
## x-axis values for graphs
discreteX <- scale_x_discrete(name = 'day of week',
limits = c('sun','mon','tue','wed','thur','fri','sat'))
## y-axis values for graphs
continuousY <-  scale_y_continuous(name = paste("total_rides (",
axisScale, '\'s)'),
seq(yScaleMin, yScaleMax,by=byValue),
labels = scales::comma)
## Data Import
list.files(pattern = 'd_ride') %>%
map_df(~fread(header = FALSE, .)) -> d_ride_table
r_station_lat_lng <- read.csv(
"cyclistic_r_station_lat_lon.csv",
header = FALSE)
## Data Import
list.files(pattern = 'd_ride') %>%
map_df(~fread(header = FALSE, .)) -> d_ride_table
r_station_lat_lng <- read.csv(
"R/cyclistic_r_station_lat_lon.csv",
header = FALSE)
## Data Import
list.files(pattern = 'd_ride') %>%
map_df(~fread(header = FALSE, .)) -> d_ride_table
r_station_lat_lng <- read.csv(
"./R/cyclistic_r_station_lat_lon.csv",
header = FALSE)
## Data Import
list.files(pattern = 'd_ride') %>%
map_df(~fread(header = FALSE, .)) -> d_ride_table
r_station_lat_lng <- read.csv(
"../R/cyclistic_r_station_lat_lon.csv",
header = FALSE)
## Data Import
list.files(pattern = 'd_ride') %>%
map_df(~fread(header = FALSE, .)) -> d_ride_table
r_station_lat_lng <- read.csv(
"./R/cyclistic_r_station_lat_lon.csv/",
header = FALSE)
## Data Import
list.files(pattern = 'd_ride') %>%
map_df(~fread(header = FALSE, .)) -> d_ride_table
r_station_lat_lng <- read.csv(
"R/cyclistic_r_station_lat_lon.csv",
header = FALSE)
## Data Import
list.files(pattern = 'd_ride') %>%
map_df(~fread(header = FALSE, .)) -> d_ride_table
r_station_lat_lng <- read.csv(
"R/cyclistic_r_station_lat_lon.csv",
header = FALSE)
## Data Import
list.files(pattern = 'd_ride') %>%
map_df(~fread(header = FALSE, .)) -> d_ride_table
r_station_lat_lng <- read.csv(
"cyclistic_r_station_lat_lon.csv",
header = FALSE)
