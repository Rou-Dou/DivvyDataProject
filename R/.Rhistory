map_df(~fread(header = FALSE, .)) -> d_ride_table
r_station_lat_lng <- read.csv(
"./cyclistic_r_station_lat_lon.csv",
header = FALSE)
## Data Import
list.files(pattern = 'd_ride') %>%
map_df(~fread(header = FALSE, .)) -> d_ride_table
r_station_lat_lng <- read.csv(
"./cyclistic_r_station_lat_lon.csv/",
header = FALSE)
## Data Import
list.files(pattern = 'd_ride') %>%
map_df(~fread(header = FALSE, .)) -> d_ride_table
r_station_lat_lng <- read.csv(
"./cyclistic_r_station_lat_lon",
header = FALSE)
## Data Import
list.files(pattern = 'd_ride') %>%
map_df(~fread(header = FALSE, .)) -> d_ride_table
r_station_lat_lng <- read.csv(
"cyclistic_r_station_lat_lon",
header = FALSE)
setwd("C:/Users/mahon/Documents/DivvyDataProject/R")
setwd("C:/Users/mahon/Documents/DivvyDataProject/R")
## Data Import
list.files(pattern = 'd_ride') %>%
map_df(~fread(header = FALSE, .)) -> d_ride_table
r_station_lat_lng <- read.csv(
"cyclistic_r_station_lat_lon.csv",
header = FALSE)
setwd("C:/Users/mahon/Documents/DivvyDataProject/R")
## Data Import
list.files(pattern = 'd_ride') %>%
map_df(~fread(header = FALSE, .)) -> d_ride_table
r_station_lat_lng <- read.csv(
"cyclistic_r_station_lat_lon.csv",
header = FALSE)
knitr::opts_chunk$set(warning = FALSE, message=FALSE)
library(ggmap)
library(tidyverse)
library(lubridate)
library(maps)
library(ggthemes)
library(ggrepel)
library(data.table)
library(broom)
library(gridExtra)
library(knitr)
### create function to find mode
getmode <- function(x){
u <- unique(x)
t <- tabulate(match(x, u))
return(u[t == max(t)])
}
### Donut graphs require same inputs, created function to clean up code
createDonut <- function (x, filter_text){
x %>%
filter(member_type == filter_text) -> x_prime
x_prime$fraction <- x_prime$ride_count/
sum(x_prime$ride_count)
x_prime$ymax <- cumsum(x_prime$fraction)
x_prime$ymin <- c(0, head(x_prime$ymax, n=-1))
x_prime$labelPosition <- (x_prime$ymax + x_prime$ymin)/2
x_prime$season <- c('Winter', 'Spring', 'Summer', 'Fall')
return(x_prime)
}
getDateString <- function(x){
daysofweek <- c('Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday',
'Friday', 'Saturday')
return(daysofweek[x])
}
### Trip totals are calculated the same for both tables
### created function to reduce redundancy
trip_totals <- function (table_in, filter_name){
## Create Top_ten_trips table including both counts and lat/lon
## coordinates
table_in %>%
filter(member_type == filter_name) -> a
merge(x = a, y = r_station_pairs,
by = 'pair_id') %>%
arrange(desc(trip_count)) %>%
subset(select = c('start_station_id', 'end_station_id', 'trip_count')) %>%
head(10) -> b
##Add coordinate information to top_ten_stations using r_station_lat_lng
merge(x = r_station_lat_lng, y = b,
by.x = 'station_id', by.y = 'start_station_id') %>%
merge(y = r_station_lat_lng, by.x = 'end_station_id',
by.y = 'station_id') -> b
b <- setcolorder(b, c(2,3,4,1,6,7,5))
return(b)
}
## create theme preset for future graphs
baseTheme <-   theme_classic() +
theme(plot.title = element_text(hjust = .5, size = 13, face = 'bold',
family = 'serif'),
panel.background = element_rect(fill = "#3f403f"),
plot.background =  element_rect(fill = "#BEBEBE"),
axis.text.x = element_text(color =  "black", family = 'serif'),
axis.text.y = element_text(color =  "black", family = 'serif'),
strip.text = element_text(size = 11, family = 'serif'))
axisScale <- 1000
yScaleMax <- 1000
yScaleMin <- 0
byValue <- 50
## x-axis values for graphs
discreteX <- scale_x_discrete(name = 'day of week',
limits = c('sun','mon','tue','wed','thur','fri','sat'))
## y-axis values for graphs
continuousY <-  scale_y_continuous(name = paste("total_rides (",
axisScale, '\'s)'),
seq(yScaleMin, yScaleMax,by=byValue),
labels = scales::comma)
## Data Import
list.files(pattern = 'd_ride') %>%
map_df(~fread(header = FALSE, .)) -> d_ride_table
r_station_lat_lng <- read.csv(
"cyclistic_r_station_lat_lon.csv",
header = FALSE)
## Data Import
list.files(pattern = 'd_ride') %>%
map_df(~fread(header = FALSE, .)) -> d_ride_table
r_station_lat_lng <- read.csv(
".\cyclistic_r_station_lat_lon.csv",
## Data Import
list.files(pattern = 'd_ride') %>%
map_df(~fread(header = FALSE, .)) -> d_ride_table
r_station_lat_lng <- read.csv(
".\cyclistic_r_station_lat_lon.csv\",
## Data Import
list.files(pattern = 'd_ride') %>%
map_df(~fread(header = FALSE, .)) -> d_ride_table
r_station_lat_lng <- read.csv(
"./cyclistic_r_station_lat_lon.csv/",
header = FALSE)
## Data Import
list.files(pattern = 'd_ride') %>%
map_df(~fread(header = FALSE, .)) -> d_ride_table
r_station_lat_lng <- read.csv(
"/cyclistic_r_station_lat_lon.csv/",
header = FALSE)
setwd("~/DivvyDataProject/R")
## Data Import
list.files(pattern = 'd_ride') %>%
map_df(~fread(header = FALSE, .)) -> d_ride_table
r_station_lat_lng <- read.csv(
"cyclistic_r_station_lat_lon.csv",
header = FALSE)
setwd("~/DivvyDataProject/R")
## Data Import
list.files(pattern = 'd_ride') %>%
map_df(~fread(header = FALSE, .)) -> d_ride_table
r_station_lat_lng <- read.csv(
"cyclistic_r_station_lat_lon.csv",
header = FALSE)
setwd("C:/Users/mahon/Documents/DivvyDataProject/R")
setwd("C:/Users/mahon/Documents/DivvyDataProject/R")
## using openstreetmap for bounding box info for
chicago_map <- get_stamenmap(
bbox = c(left = -87.73, bottom = 41.76, right = -87.57, top = 41.97),
maptype='terrain',
zoom = 12)
## using openstreetmap for bounding box info for
bbox <- c(left = -87.73, bottom = 41.76, right = -87.57, top = 41.97)
chicago_map <- get_stamenmap(
bbox = bbox, maptype='terrain', zoom = 12)
library(ggmap)
library(tidyverse)
library(lubridate)
library(maps)
library(ggthemes)
library(ggrepel)
library(data.table)
library(broom)
library(gridExtra)
library(knitr)
## using openstreetmap for bounding box info for
bbox <- c(left = -87.73, bottom = 41.76, right = -87.57, top = 41.97)
chicago_map <- get_stamenmap(
bbox = bbox, maptype='terrain', zoom = 12)
## using openstreetmap for bounding box info for
bbox <- c(left = -87.73, bottom = 41.76, right = -87.57, top = 41.97)
chicago_map <- get_stamenmap(
bbox = bbox, maptype='terrain', zoom = 11)
## using openstreetmap for bounding box info for
bbox <- c(left = -87.73, bottom = 41.76, right = -87.57, top = 41.97)
chicago_map <- get_stamenmap(
bbox = bbox, maptype='terrain', zoom = 10)
## Map all stations within the bounds of the top 10
ggmap(chicago_map) +
geom_point(data = r_station_lat_lng, aes(x = lon, y = lat))+
ggtitle(label = 'Station Locations')
### create function to find mode
getmode <- function(x){
u <- unique(x)
t <- tabulate(match(x, u))
return(u[t == max(t)])
}
### Donut graphs require same inputs, created function to clean up code
createDonut <- function (x, filter_text){
x %>%
filter(member_type == filter_text) -> x_prime
x_prime$fraction <- x_prime$ride_count/
sum(x_prime$ride_count)
x_prime$ymax <- cumsum(x_prime$fraction)
x_prime$ymin <- c(0, head(x_prime$ymax, n=-1))
x_prime$labelPosition <- (x_prime$ymax + x_prime$ymin)/2
x_prime$season <- c('Winter', 'Spring', 'Summer', 'Fall')
return(x_prime)
}
getDateString <- function(x){
daysofweek <- c('Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday',
'Friday', 'Saturday')
return(daysofweek[x])
}
### Trip totals are calculated the same for both tables
### created function to reduce redundancy
trip_totals <- function (table_in, filter_name){
## Create Top_ten_trips table including both counts and lat/lon
## coordinates
table_in %>%
filter(member_type == filter_name) -> a
merge(x = a, y = r_station_pairs,
by = 'pair_id') %>%
arrange(desc(trip_count)) %>%
subset(select = c('start_station_id', 'end_station_id', 'trip_count')) %>%
head(10) -> b
##Add coordinate information to top_ten_stations using r_station_lat_lng
merge(x = r_station_lat_lng, y = b,
by.x = 'station_id', by.y = 'start_station_id') %>%
merge(y = r_station_lat_lng, by.x = 'end_station_id',
by.y = 'station_id') -> b
b <- setcolorder(b, c(2,3,4,1,6,7,5))
return(b)
}
## create theme preset for future graphs
baseTheme <-   theme_classic() +
theme(plot.title = element_text(hjust = .5, size = 13, face = 'bold',
family = 'serif'),
panel.background = element_rect(fill = "#3f403f"),
plot.background =  element_rect(fill = "#BEBEBE"),
axis.text.x = element_text(color =  "black", family = 'serif'),
axis.text.y = element_text(color =  "black", family = 'serif'),
strip.text = element_text(size = 11, family = 'serif'))
axisScale <- 1000
yScaleMax <- 1000
yScaleMin <- 0
byValue <- 50
## x-axis values for graphs
discreteX <- scale_x_discrete(name = 'day of week',
limits = c('sun','mon','tue','wed','thur','fri','sat'))
## y-axis values for graphs
continuousY <-  scale_y_continuous(name = paste("total_rides (",
axisScale, '\'s)'),
seq(yScaleMin, yScaleMax,by=byValue),
labels = scales::comma)
## Data Import
list.files(pattern = 'd_ride') %>%
map_df(~fread(header = FALSE, .)) -> d_ride_table
r_station_lat_lng <- read.csv(
"cyclistic_r_station_lat_lon.csv",
header = FALSE)
r_station_table <- read.csv(
"cyclistic_r_station_table.csv",
header = FALSE)
setDT(d_ride_table)
### rename columns
names(r_station_lat_lng) <- c('station_id', 'lat', 'lon')
names(d_ride_table) <- c('ride_id', 'rideable_type', 'started_at', 'ended_at',
'start_station_id', 'end_station_id',
'member_casual', 'ride_in_seconds',
'ride_length', 'year_of_ride', 'month_of_ride',
'day_of_week')
names(r_station_table) <- c('station_name', 'station_key')
### reclassify datetimes as POSIX
d_ride_table$started_at <- as_datetime(d_ride_table$started_at)
d_ride_table$ended_at <- as_datetime(d_ride_table$ended_at)
## Map start/end station locations for the top 10 trips taken by members
ggmap(chicago_map) +
geom_point(data = top_ten_trips_m
,aes(x = lon.x, y=lat.x),size = 2)+
ggtitle(label = 'Top 10 Most Visited Stations Members') +
geom_point(data = top_ten_trips_m,
aes(x = lon.y, y = lat.y),size =2)+
theme(legend.position = "none")
## Create tables for the top ten trips for casual and member riders
top_ten_trips_c <- trip_totals(d_station_trip_totals, 'casual')
## using openstreetmap for bounding box info for
bbox <- c(left = -87.73, bottom = 41.76, right = -87.57, top = 41.97)
chicago_map <- get_stamenmap(
bbox = bbox, maptype='terrain', zoom = 12)
## using openstreetmap for bounding box info for
bbox <- c(left = -87.73, bottom = 41.76, right = -87.57, top = 41.97)
chicago_map <- get_stamenmap(
bbox = bbox, maptype='terrain', zoom = 12, crop = TRUE)
## using openstreetmap for bounding box info for
bbox <- c(left = -87.72, bottom = 41.76, right = -87.57, top = 41.97)
chicago_map <- get_stamenmap(
bbox = bbox, maptype='terrain', zoom = 12, crop = TRUE)
## using openstreetmap for bounding box info for
bbox <- c(left = -87.73, bottom = 41.76, right = -87.57, top = 41.97)
chicago_map <- get_stamenmap(
bbox = bbox, maptype='terrain', zoom = 12, crop = TRUE)
## using openstreetmap for bounding box info for
bbox <- c(left = -87.73, bottom = 41.76, right = -87.57, top = 41.97)
chicago_map <- get_stamenmap(
bbox = bbox, maptype='toner', zoom = 12, crop = TRUE)
## using openstreetmap for bounding box info
chicago_map <- get_stamenmap(
bbox = c(left = -87.73, bottom = 41.76, right = -87.57, top = 41.97), maptype='terrain', zoom = 12, crop = TRUE)
## using openstreetmap for bounding box info
chicago_map <- get_stamenmap(
bbox = c(left = -87.73, bottom = 41.76,
right = -87.57, top = 41.97),
maptype='terrain', zoom = 13, crop = TRUE)
## using openstreetmap for bounding box info
chicago_map <- get_stamenmap(
bbox = c(left = -87.73, bottom = 41.76,
right = -87.57, top = 41.97),
maptype='terrain', zoom = 13, crop = FALSE)
gc()
## using openstreetmap for bounding box info
chicago_map <- get_stamenmap(
bbox = c(left = -87.73, bottom = 41.76,
right = -87.57, top = 41.97),
maptype='terrain', zoom = 13, crop = TRUE)
## using openstreetmap for bounding box info
chicago_map <- ggmap::get_stamenmap(
bbox = c(left = -87.73, bottom = 41.76,
right = -87.57, top = 41.97),
maptype='terrain', zoom = 13, crop = TRUE)
install.packages(c("fansi", "htmltools", "plyr", "sp"))
install.packages(c("fansi", "htmltools", "plyr", "sp"))
library(ggmap)
library(tidyverse)
library(lubridate)
library(maps)
library(ggthemes)
library(ggrepel)
library(data.table)
library(broom)
library(gridExtra)
library(knitr)
## using openstreetmap for bounding box info
chicago_map <- ggmap::get_stamenmap(
bbox = c(left = -87.73, bottom = 41.76,
right = -87.57, top = 41.97),
maptype='terrain', zoom = 13, crop = TRUE)
register_stadiamaps('69258451-dd34-4cd9-809f-5461b30fdc9e' , write = FALSE).
register_stadiamaps('69258451-dd34-4cd9-809f-5461b30fdc9e' , write = FALSE)
.libPaths()
.libPaths()
library(ggmap)
register_stadiamaps('69258451-dd34-4cd9-809f-5461b30fdc9e' , write = FALSE)
install.packages('ggmap')
install.packages("ggmap")
install.packages('ggmap')
install.packages("ggmap")
library(ggmap)
library(tidyverse)
library(lubridate)
library(maps)
library(ggthemes)
library(ggrepel)
library(data.table)
library(broom)
library(gridExtra)
library(knitr)
options(download.file.method = "wininet")
library(ggmap)
install.packages('ggmap')
install.packages("ggmap")
library(ggmap)
library(tidyverse)
library(lubridate)
library(maps)
library(ggthemes)
library(ggrepel)
library(data.table)
library(broom)
library(gridExtra)
library(knitr)
ggmap::register_stadiamap('69258451-dd34-4cd9-809f-5461b30fdc9e' , write = FALSE)
remotes::install_github("forestgeo/fgeo.habitat")
install.packages('remotes')
library(remotes)
remotes::install_github("forestgeo/fgeo.habitat")
remotes::install_github("stadiamaps/ggmaps.git")
remotes::install_github("dkahle/ggmaps")
remotes::install_github("dkahle/ggmap")
detach(package:ggmap, unload = TRUE)
remotes::install_github('dkahle/ggmap')
library(ggmap)
detach(package:ggmap, unload = TRUE)
remove.packages("ggmap")
remotes::install_github('dkahle/ggmap')
library(ggmap)
ggmap::register_stadiamap('69258451-dd34-4cd9-809f-5461b30fdc9e' , write = FALSE)
ggmap::register_stadiamaps('69258451-dd34-4cd9-809f-5461b30fdc9e' , write = FALSE)
register_stadiamaps('69258451-dd34-4cd9-809f-5461b30fdc9e' , write = FALSE)
options(download.file.method = "wininet")
.libPaths()
utils::download.file('https://github.com/stadiamaps/ggmap', "C:/Users/mahon/AppData/Local/R/win-library/4.3", method = download_method(),
quiet=quiet)
utils::download.file('https://github.com/stadiamaps/ggmap', "C:/Users/mahon/AppData/Local/R/win-library/4.3", method = 'wininet',
quiet=quiet)
utils::download.file('https://github.com/stadiamaps/ggmap', "C:/Users/mahon/AppData/Local/R/win-library/4.3", method = 'wininet',
quiet=TRUE)
knitr::opts_chunk$set(warning = FALSE, message=FALSE)
setwd('C:/Users/mahon/Documents/DivvyDataProject/R')
utils::download.file('https://github.com/stadiamaps/ggmap', "C:/Users/mahon/AppData/Local/R/win-library/4.3", method = 'wininet',
quiet=TRUE)
knitr::opts_chunk$set(warning = FALSE, message=FALSE)
setwd('C:/Users/mahon/Documents/DivvyDataProject/R')
utils::download.file('https://github.com/stadiamaps/ggmap', "C:/Users/mahon/AppData/Local/R/win-library/4.3", method = 'wininet',
quiet=TRUE)
devtools::install_github('dkahle', 'ggmap')
install.packages('devtool')
remove.packages('ggmap')
remotes::install_github('stadiamaps/ggmap')
library(ggmap)
register_stadiamaps(69258451-dd34-4cd9-809f-5461b30fdc9e)
register_stadiamaps(69258451dd344cd9809f5461b30fdc9e)
register_stadiamaps('69258451-dd34-4cd9-809f-5461b30fdc9e')
chicago_map <- get_stadiamap(
bbox = c(left = -87.73, bottom = 41.76, right = -87.57, top = 41.97),
maptype='terrain',
zoom = 12)
chicago_map <- get_stadiamap(
bbox = c(left = -87.73, bottom = 41.76, right = -87.57, top = 41.97),
maptype='terrain',
zoom = 12) %>% ggmap()
## using openstreetmap for bounding box info for
chicago_map <- get_stadiamap(
bbox = c(left = -87.73, bottom = 41.76, right = -87.57, top = 41.97),
maptype='stamen_terrain',
zoom = 12) %>% ggmap()
## using openstreetmap for bounding box info for
chicago_map <- get_stadiamap(
bbox = c(left = -87.73, bottom = 41.76, right = -87.57, top = 41.97),
maptype='stamen_terrain',
zoom = 13) %>% ggmap()
## Map all stations within the bounds of the top 10
ggmap(chicago_map) +
geom_point(data = r_station_lat_lng, aes(x = lon, y = lat))+
ggtitle(label = 'Station Locations')
## Map all stations within the bounds of the top 10
ggmap(chicago_map) +
geom_point(data = r_station_lat_lng, aes(x = lon, y = lat))+
ggtitle(label = 'Station Locations')
## Map all stations within the bounds of the top 10
ggmap::ggmap(chicago_map) +
geom_point(data = r_station_lat_lng, aes(x = lon, y = lat))+
ggtitle(label = 'Station Locations')
## Map all stations within the bounds of the top 10
chicago_map +
geom_point(data = r_station_lat_lng, aes(x = lon, y = lat))+
ggtitle(label = 'Station Locations')
setwd("~/DivvyDataProject/R")
## Data Import
list.files(pattern = 'd_ride') %>%
map_df(~fread(header = FALSE, .)) -> d_ride_table
list.files(pattern = 'd_ride') %>%
map_df(~fread(header = FALSE, .)) -> d_ride_table
## Data Import
d_ride_table <- list.files(pattern = 'd_ride') %>%
map_df(~fread(header = FALSE, .))
## Data Import
d_ride_table <- list.files(pattern = 'd_ride') %>%
map_df(~fread(header = FALSE, .))
install.packages(c("cli", "digest", "fastmap", "ggrepel", "htmltools", "rlang"))
install.packages(c("cli", "digest", "fastmap", "ggrepel", "htmltools", "rlang"))
library(remotes)
library(ggmap)
install.packages(c("cli", "ggrepel"))
install.packages(c("cli", "ggrepel"))
library(remotes)
library(ggmap)
install.packages(c("cli", "ggrepel"))
install.packages(c("cli", "ggrepel"))
library(remotes)
library(ggmap)
Required if you have not pulled the most recent changes to ggmap remotes::install_github('https://github.com/stadiamaps/ggmap')
remotes::install_github('https://github.com/stadiamaps/ggmap')
library(remotes)
library(ggmap)
remotes::install_github('https://github.com/stadiamaps/ggmap')
remove.packages('cli')
install.packages('cli')
install.packages("cli")
library(remotes)
library(ggmap)
knitr::opts_chunk$set(warning = FALSE, message=FALSE)
library(remotes)
library(ggmap)
library(tidyverse)
install.packages('cli')
library(tidyverse)
library(remotes)
library(ggmaps)
# Required if you have not pulled the most recent changes to ggmap
remotes::install_github('https://github.com/stadiamaps/ggmap')
library(tidyverse)
library(remotes)
library(ggmap)
library(lubridate)
library(maps)
library(ggthemes)
library(ggrepel)
library(data.table)
library(broom)
library(gridExtra)
library(knitr)
